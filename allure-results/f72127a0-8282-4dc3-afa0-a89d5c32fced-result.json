{"name": "test_update_email_with_auth", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидался код ответа 200, но получен 403, текст ответа: {\"success\":false,\"message\":\"User with such email already exists\"}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code", "trace": "self = <tests.test_update_user.TestUpdateUser object at 0x000001E820FA5A00>, create_user = {'email': 'kaylalong_20241023184547@example.com', 'name': 'Heather', 'password': '12345678'}\nget_user_token = <function get_user_token.<locals>._get_token at 0x000001E820FD1B20>, unique_email = 'roger76@example.org'\n\n    @allure.step(\"Изменение email пользователя с авторизацией\")\n    def test_update_email_with_auth(self, create_user, get_user_token, unique_email):\n        token = get_user_token(create_user[\"email\"], create_user[\"password\"])\n        update_user = UpdateUser()\n        updated_data = {\"email\": unique_email}\n        response = update_user.update_with_auth(token, updated_data)\n    \n>       assert response.status_code == 200, f\"Ожидался код ответа 200, но получен {response.status_code}, текст ответа: {response.text}\"\nE       AssertionError: Ожидался код ответа 200, но получен 403, текст ответа: {\"success\":false,\"message\":\"User with such email already exists\"}\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\ntests\\test_update_user.py:16: AssertionError"}, "steps": [{"name": "Изменение email пользователя с авторизацией", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидался код ответа 200, но получен 403, текст ответа: {\"success\":false,\"message\":\"User with such email already exists\"}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code\n", "trace": "  File \"C:\\Users\\funny\\PycharmProjects\\Diplom_2\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\funny\\PycharmProjects\\Diplom_2\\venv\\tests\\test_update_user.py\", line 16, in test_update_email_with_auth\n    assert response.status_code == 200, f\"Ожидался код ответа 200, но получен {response.status_code}, текст ответа: {response.text}\"\n"}, "parameters": [{"name": "create_user", "value": "{'email': 'kaylalong_20241023184547@example.com', 'password': '12345678', 'name': 'Heather'}"}, {"name": "get_user_token", "value": "<function get_user_token.<locals>._get_token at 0x000001E820FD1B20>"}, {"name": "unique_email", "value": "'roger76@example.org'"}], "start": 1729691148332, "stop": 1729691149095}], "start": 1729691148332, "stop": 1729691149097, "uuid": "63e8de86-dc32-4620-869b-807a553b7860", "historyId": "8ee9a93d3543178a40d3f62d47ee3eeb", "testCaseId": "8ee9a93d3543178a40d3f62d47ee3eeb", "fullName": "tests.test_update_user.TestUpdateUser#test_update_email_with_auth", "labels": [{"name": "feature", "value": "Обновление данных пользователя"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_update_user"}, {"name": "subSuite", "value": "TestUpdateUser"}, {"name": "host", "value": "DESKTOP-N041KP4"}, {"name": "thread", "value": "20024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_update_user"}]}